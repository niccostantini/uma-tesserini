/**
 * REPOSITORY PER LA GESTIONE DELLE REVOCHE
 * ======================================
 * 
 * Questo modulo centralizza tutte le operazioni di accesso ai dati
 * relative alle revoche dei tesserini.
 */

const { selectOne, selectMany, execute } = require('../db');

/**
 * Repository per la gestione delle revoche
 * @class RevocheRepository
 */
class RevocheRepository {
  
  /**
   * Ottiene tutte le revoche con informazioni di tessera e persona
   * 
   * @param {Object} filters - Filtri opzionali
   * @param {string} [filters.tesserino_id] - Filtro per tesserino
   * @param {string} [filters.operatore] - Filtro per operatore
   * @param {string} [filters.dataInizio] - Data inizio filtro
   * @param {string} [filters.dataFine] - Data fine filtro
   * @param {number} [filters.limit] - Limite risultati
   * @returns {Array} Lista delle revoche
   */
  async findAll(filters = {}) {\n    const { tesserino_id, operatore, dataInizio, dataFine, limit } = filters;\n    \n    let query = `\n      SELECT r.*,\n             t.stato as tessera_stato,\n             t.exp_date as tessera_scadenza,\n             p.nome as persona_nome,\n             p.categoria as persona_categoria\n      FROM revoche r\n      JOIN tesserini t ON r.tesserino_id = t.id\n      JOIN persone p ON t.persona_id = p.id\n    `;\n    \n    const conditions = [];\n    const params = [];\n    \n    if (tesserino_id) {\n      conditions.push('r.tesserino_id = ?');\n      params.push(tesserino_id);\n    }\n    \n    if (operatore && operatore.trim()) {\n      conditions.push('r.operatore LIKE ?');\n      params.push(`%${operatore.trim()}%`);\n    }\n    \n    if (dataInizio) {\n      conditions.push('date(r.timestamp) >= ?');\n      params.push(dataInizio);\n    }\n    \n    if (dataFine) {\n      conditions.push('date(r.timestamp) <= ?');\n      params.push(dataFine);\n    }\n    \n    if (conditions.length > 0) {\n      query += ' WHERE ' + conditions.join(' AND ');\n    }\n    \n    query += ' ORDER BY r.timestamp DESC';\n    \n    if (limit && limit > 0) {\n      query += ' LIMIT ?';\n      params.push(limit);\n    }\n    \n    return selectMany(query, params);\n  }\n  \n  /**\n   * Trova una revoca per ID\n   * \n   * @param {string} id - ID della revoca\n   * @returns {Object|null} Revoca o null se non trovata\n   */\n  async findById(id) {\n    return selectOne(`\n      SELECT r.*,\n             t.stato as tessera_stato,\n             p.nome as persona_nome,\n             p.categoria as persona_categoria\n      FROM revoche r\n      JOIN tesserini t ON r.tesserino_id = t.id\n      JOIN persone p ON t.persona_id = p.id\n      WHERE r.id = ?\n    `, [id]);\n  }\n  \n  /**\n   * Trova la revoca di un tesserino specifico\n   * \n   * @param {string} tesserinId - ID del tesserino\n   * @returns {Object|null} Revoca del tesserino o null\n   */\n  async findByTesserinId(tesserinId) {\n    return selectOne(`\n      SELECT * FROM revoche WHERE tesserino_id = ?\n    `, [tesserinId]);\n  }\n  \n  /**\n   * Crea una nuova revoca\n   * \n   * @param {Object} revocaData - Dati della revoca\n   * @param {string} revocaData.id - ID della revoca (UUID)\n   * @param {string} revocaData.tesserino_id - ID del tesserino revocato\n   * @param {string} revocaData.motivo - Motivo della revoca\n   * @param {string} revocaData.operatore - Nome dell'operatore\n   * @returns {Object} Risultato dell'inserimento\n   */\n  async create(revocaData) {\n    const { id, tesserino_id, motivo, operatore } = revocaData;\n    \n    return execute(`\n      INSERT INTO revoche (id, tesserino_id, motivo, operatore)\n      VALUES (?, ?, ?, ?)\n    `, [id, tesserino_id, motivo, operatore]);\n  }\n  \n  /**\n   * Verifica se un tesserino è già stato revocato\n   * \n   * @param {string} tesserinId - ID del tesserino\n   * @returns {boolean} True se il tesserino è revocato\n   */\n  async isRevoked(tesserinId) {\n    const result = selectOne(`\n      SELECT 1 FROM revoche WHERE tesserino_id = ? LIMIT 1\n    `, [tesserinId]);\n    \n    return !!result;\n  }\n  \n  /**\n   * Ottiene statistiche sulle revoche\n   * \n   * @returns {Object} Statistiche revoche\n   */\n  async getStats() {\n    const stats = selectOne(`\n      SELECT COUNT(*) AS totale_revoche,\n             COUNT(CASE WHEN date(timestamp) = date('now') THEN 1 END) AS revoche_oggi,\n             COUNT(CASE WHEN date(timestamp) >= date('now', '-7 days') THEN 1 END) AS revoche_settimana,\n             COUNT(CASE WHEN date(timestamp) >= date('now', '-30 days') THEN 1 END) AS revoche_mese\n      FROM revoche\n    `);\n    \n    return stats || {\n      totale_revoche: 0,\n      revoche_oggi: 0,\n      revoche_settimana: 0,\n      revoche_mese: 0\n    };\n  }\n  \n  /**\n   * Ottiene revoche per periodo\n   * \n   * @param {string} dataInizio - Data inizio in formato YYYY-MM-DD\n   * @param {string} dataFine - Data fine in formato YYYY-MM-DD\n   * @returns {Array} Revoche nel periodo specificato\n   */\n  async findByPeriod(dataInizio, dataFine) {\n    return selectMany(`\n      SELECT r.*,\n             p.nome as persona_nome,\n             p.categoria as persona_categoria\n      FROM revoche r\n      JOIN tesserini t ON r.tesserino_id = t.id\n      JOIN persone p ON t.persona_id = p.id\n      WHERE date(r.timestamp) BETWEEN ? AND ?\n      ORDER BY r.timestamp DESC\n    `, [dataInizio, dataFine]);\n  }\n  \n  /**\n   * Ottiene revoche per operatore\n   * \n   * @param {string} operatore - Nome dell'operatore\n   * @param {number} [limit] - Limite risultati\n   * @returns {Array} Revoche effettuate dall'operatore\n   */\n  async findByOperatore(operatore, limit = null) {\n    let query = `\n      SELECT r.*,\n             p.nome as persona_nome,\n             p.categoria as persona_categoria\n      FROM revoche r\n      JOIN tesserini t ON r.tesserino_id = t.id\n      JOIN persone p ON t.persona_id = p.id\n      WHERE r.operatore LIKE ?\n      ORDER BY r.timestamp DESC\n    `;\n    \n    const params = [`%${operatore}%`];\n    \n    if (limit && limit > 0) {\n      query += ' LIMIT ?';\n      params.push(limit);\n    }\n    \n    return selectMany(query, params);\n  }\n  \n  /**\n   * Ottiene i motivi di revoca più comuni\n   * \n   * @param {number} [limit=10] - Limite risultati\n   * @returns {Array} Lista motivi ordinati per frequenza\n   */\n  async getMotiviPiuComuni(limit = 10) {\n    return selectMany(`\n      SELECT motivo, COUNT(*) as count\n      FROM revoche\n      GROUP BY motivo\n      ORDER BY count DESC\n      LIMIT ?\n    `, [limit]);\n  }\n  \n  /**\n   * Ottiene gli operatori con più revoche effettuate\n   * \n   * @param {number} [limit=10] - Limite risultati\n   * @returns {Array} Lista operatori ordinati per numero revoche\n   */\n  async getOperatoriPiuAttivi(limit = 10) {\n    return selectMany(`\n      SELECT operatore, COUNT(*) as revoche_count\n      FROM revoche\n      GROUP BY operatore\n      ORDER BY revoche_count DESC\n      LIMIT ?\n    `, [limit]);\n  }\n  \n  /**\n   * Ottiene report revoche per giornata\n   * \n   * @param {number} [giorni=30] - Numero giorni passati da considerare\n   * @returns {Array} Report giornaliero revoche\n   */\n  async getReportGiornaliero(giorni = 30) {\n    return selectMany(`\n      SELECT date(timestamp) as giorno,\n             COUNT(*) as revoche_count,\n             COUNT(DISTINCT operatore) as operatori_attivi\n      FROM revoche\n      WHERE date(timestamp) >= date('now', '-${giorni} days')\n      GROUP BY date(timestamp)\n      ORDER BY giorno DESC\n    `);\n  }\n  \n  /**\n   * Elimina una revoca (solo per correzioni amministrative)\n   * \n   * @param {string} id - ID della revoca\n   * @returns {Object} Risultato dell'eliminazione\n   */\n  async delete(id) {\n    return execute('DELETE FROM revoche WHERE id = ?', [id]);\n  }\n}\n\nmodule.exports = new RevocheRepository();
